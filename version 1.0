void copy_me(int *a,int *b,int n){
	for(int i=0;i<n;i++){
		a[i]=b[i];
	}}

void swap_me(int *t,int i,int j){
	int temp;
	temp=t[j];
	t[j]=t[i];
	t[i]=temp;
}

int duplicate(int *t,int a,int b){
	
	for(int i=a;i<b-1;i++){
		for(int j=i+1;j<=b;j++){
			if(t[i]=t[j]){

			return 0;
			}

		}
	}
	return 1;}

void copy_me(int **a,int **b,int n){
	
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			a[i][j]=b[i][j];
		}
	}}

void zero_column(int **a,int k,int n){
	for(int i=0;i<n;i++){
		a[k][i]=0;
	}}

void closest_neighbour(int **a,int *b,int start_point,int n){
		b[0]=start_point;
		int k[n][n],o,j=0,l=0;
		copy_me(k,a,n);
		int mini=k[start_point][i];
		for(int f1=1;f1<n ;f1++){
	
			for(int i=0;i<n;i++){


					if(k[start_point][i]<min && k[start_point][i]!=0){
						mini=k[start_point][i];
						o=i-1;
					}
					if(i==n-1){
						strat_point=o;
						b[f1]=o;
						zero_column(k,o,n);
					}
			}

		}}

void show_elem(int *a,int n){

	for(int i=0;i<n;i++){
		cout<<" "<<a[i];
	}
	cout<<a[0];
	}

int distance(int **a,int i,int j){
	
return a[i-1][j-1];

}




bool match_me(int *a,int *b,int n){   supposons que la distance AB != BA
	
for(int i=1;i<n;i++){
if(a[i]!=b[i]){
	
	return false;									
}
}
return true;


}

bool match_me(int *a,int *b,int n){				supposons que la distance AB == BA
	
for(int i=1;i<n;i++){
if(a[i]!=b[n-i]){
	
	return false;									
}
}
return true;


}

int mini(int a,int b){
	if(a<=b){
		return a;
	}
	return b;
}


distance_between_points(int **a,int *b,int n){
	int sum=0;
	for(int i=1;i<n-1;i++){
		sum=sum+a[b[i]-1][b[i+1]-1];
	}
	sum=sum+a[b[i+1]-1][b[0]];
	return sum;
}


shake_me(int **a,int *b,int n,int temp){
	copy_me(temp,b,n);
	int k=0,dist_after_permutation,before1,before2,dist_before_permutation,personal_best;
	do{
	k=k+1;
	dist_before_permutation=distance_between_points(a,temp,n);
	if(k==n-1){
		k=1;
	}
	before1=b[k];
	before2=b[k+1];
	swap_me(b,k,k+1);
	dist_after_permutation=dist_before_permutation+distance(b[k-1],b[k])+distance(b[k+1],b[k+2])-distance(b[k-1],b[before1])-distance(b[k+1],b[before2]);
	if(dist_after_permutation<=personal_best){
		copy(temp,b,n);
		personal_best=dist_after_permutation;
	}
	}while(match_me(temp,b,n) == FALSE)
	return personal_best;
}




am_i_better(int sol1,int sol2){
	if((sol1/sol2)<0.55 && (sol1/sol2)>0.45){
		return TRUE;
	}	
	return FALSE;
}

simulated_annealing (int **a,int *b,int n,int start-point){

	int t,it;

	closest_neighbour(a,b,start_point,n);
	int best,unsurek=a;
	int k=0,dist_after_permutation,before1,before2,dist_before_permutation,personal_best;
	best=distance_between_points(a,b,n);
	do{
		k=k+1;
		dist_before_permutation=distance_between_points(a,temp,n);
		if(k==n-1){
			k=1;
		}
		before1=b[k];
		before2=b[k+1];
		swap_me(b,k,k+1);
		dist_after_permutation=dist_before_permutation+distance(b[k-1],b[k])+distance(b[k+1],b[k+2])-distance(b[k-1],b[before1])-distance(b[k+1],b[before2]);
		if(dist_after_permutation<=personal_best){
			copy(temp,b,n);
			personal_best=dist_after_permutation;
			it=it+1;
		}
		else{
			int r;
			r=rand(0.1);
			if(acceptance_probabilty(dist_after_permutation,personal_record,it) > r){
				it=it+1;
				copy(temp,b,n);
			personal_best=dist_after_permutation;
			}
		}		
	}while(am_i_better == FALSE || it > 50);
}





void closest_neighbour(int **a,int *b,int start_point,int n){
		b[0]=start_point;
		int k[n][n],o,j=0,l=0;
		copy_me(k,a,n);
		int mini=k[start_point][i];
		for(int f1=1;f1<n ;f1++){
	
			for(int i=0;i<n;i++){


					if(k[start_point][i]<min && k[start_point][i]!=0){
						mini=k[start_point][i];
						o=i-1;
					}
					if(i==n-1){
						start_point=o;
						b[f1]=o;
						zero_column(k,o,n);
					}
			}

		}}




re_align(int *b,int wanted_start_point,int n){

	int tracer;
	int k[n];
	for(int count1=0;count1<n;count1++){

		if(b[count1] == wanted_start_point){
			k[tracer]=wanted_start_point;	
			for(int count2=count1+1;count2<n;count2++){
					tracer=tracer+1;
					k[tracer]=b[count2-count1];
			}
		copy_me(b,k,n)
		break;
		}
	}
}

closest_neighbour_all(int **a,int *b,int wanted_start_point_all,int n){
	int mini;
	closest_neighbour(a,b,1,n);
	mini=distance_between_points(a,b,n);
	int best_sequence[n];
	copy_me(best_sequence,b,n)
	for(int count=1;count<n;count++){
		closest_neighbour(a,b,count+1,n);
		if(distance_between_points(a,b,n)<=mini){
			copy_me(best_sequence,b,n);
			mini=distance_between_points(a,best_sequence,n);
		}
	}
	re_align(b,wanted_start_point,n);
}





acceptance_probability(int a,int b,int T){

	return exp(-(a-b)/T);
}
